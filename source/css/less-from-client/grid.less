

/*  ----------------------------------------------------------------------------
   	/Grid
   	----------------------------------------------------------------------------

    * based on http://flexboxgrid.com/
    * with few update
    * - add offset 0 Classes
    * - no nested grid inside grids if possible

    HTML grid structure --------------------------------------------------------

    <div class="grid">
		<div class="row">
            <div class="col-xs-12 col-s-4 col-s-offset-2"></div>
        </div>
	</div>

    ----------------------------------------------------------------------------- */



// @col-names: s, m, l, xl;
@col-breaks: @s-break, @m-break, @l-break, @xl-break;



/*  ----------------------------------------------------------------------------
   	/Grid Mixins
   	---------------------------------------------------------------------------- */

// .for
.for(@i, @n) {.-each(@i)}
.for(@n)     when (isnumber(@n)) {.for(1, @n)}
.for(@i, @n) when not (@i = @n)  {
    .for((@i + (@n - @i) / abs(@n - @i)), @n);
}

// .for-each
.for-each(@array)   when (default()) {.for-impl_(length(@array))}
.for-impl_(@i) when (@i > 1)    {.for-impl_((@i - 1))}
.for-impl_(@i) when (@i > 0)    {.-each(extract(@array, @i))}


.makegrid(@class) {
    [class^='col-@{class}'],
    [class*=' col-@{class}'],
    [class^='col-@{class}-offset'],
    [class*='col-@{class}-offset']{
    	flex: 0 0 auto;
    	flex-direction: column;
    	padding-right: @half-gutter-width;
    	padding-left: @half-gutter-width;
    }

    .col-@{class}-0{
        padding-right: 0;
        padding-left: 0;
    }

    .col-@{class} {
    	flex-grow: 1;
    	flex-basis: 0;
    	max-width: 100%;
    }

    .make-cols(@class);
    .make-offset(@class; 0);
    .make-offsets(@class);
    .make-position-classes(@class);
}

.make-column(@class; @col-number) {
	.col-@{class}-@{col-number} {
		flex-basis: ((100% / @grid-columns) * @col-number);
		max-width: ((100% / @grid-columns) * @col-number);
	}

	.no-flexboxlegacy .col-@{class}-@{col-number} {
		width: ((100% / @grid-columns) * @col-number);
	}
}

.make-cols(@class; @col-number: @grid-columns) when (@col-number > 0) {
    .make-cols(@class; (@col-number - 1));
    .make-column(@class; @col-number);
}

.make-offset(@class; @col-number) {
    .col-@{class}-offset-@{col-number} {
    	margin-left: ((100% / @grid-columns) * @col-number);
    }
}

.make-offsets(@class; @col-number: (@grid-columns - 1)) when (@col-number > 0) {
    .make-offsets(@class; (@col-number - 1));
    .make-offset(@class; @col-number);
}

.make-position-classes(@class) {
    .start-@{class} {
        justify-content: flex-start;
        text-align: left;       //IE11 support
    	text-align: start;
    }
    .center-@{class} {
    	justify-content: center;
    	text-align: center;
    }
    .end-@{class} {
        justify-content: flex-end;
        text-align: right;      //IE11 support
    	text-align: end;
    }
    .top-@{class} {
    	align-items: flex-start;
    }
    .middle-@{class} {
    	align-items: center;
    }
    .bottom-@{class} {
    	align-items: flex-end;
    }
    .around-@{class} {
        justify-content: space-around;
    }
    .between-@{class} {
        justify-content: space-between;
    }
    .first-@{class} {
    	order: -1;
    }
    .last-@{class} {
    	order: 1;
    }
}



 /* ----------------------------------------------------------------------------
	/Grid
	---------------------------------------------------------------------------- */

.grid {
	padding-right: @outer-margin;
	padding-left: @outer-margin;
}
.row {
	display: flex;
    flex-direction: row;
    flex-wrap: wrap;
	margin: 0 auto;

    @media only screen and (min-width: @s-break) {
        margin-right: @gutter-compensation;
    	margin-left: @gutter-compensation;
    }
}

.makegrid(xs);

@media only screen and (min-width: @s-break) {
  .makegrid(s);
}

@media only screen and (min-width: @m-break) {
  .makegrid(m);
}

@media only screen and (min-width: @l-break) {
  .makegrid(l);
}

@media only screen and (min-width: @xl-break)
{
    .makegrid(xl);
}

/*.for-each(@col-breaks);
.-each(@breakpoint) {
	@media only screen and (min-width: @breakpoint) {
		.makegrid(extract(@col-names, @i));
	}
}*/
